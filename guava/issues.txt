Unreported issues


ISSUE 1: Ensures for LTLengthOf

Could be solved by:
  https://github.com/typetools/checker-framework/issues/1606
Also needs:
  https://github.com/kelloggm/checker-framework/issues/176
Example code:
  class Builder{
    int[] array;
    @IndexOrHigh("array") int count;
    @EnsuresLTLengthOf(expression="count", value="array", offset="#1 - 1")
    void ensureRoomFor(@NonNegative int numberToAdd){
      // implementation
    } 
    void add(int value){
      ensureRoomFor(1);
      array[count] = value;
      count += 1;
    }
  }


ISSUE 2:

int array;
void m(Collection c, @LTLengthOf(value="array", offset="c.size() - 1")){
	@LTLengthOf(value="array", offset="-1") int i;
	for(Object o: c){
		++i;
	}
}

also needs https://github.com/kelloggm/checker-framework/issues/154

ISSUE 3:
private annotation for a public method


ISSUE 4:

length is a sum of lengths of arrays.
pos is increased the same way as length, so pos points to a valid
range of length array.length in result.
   
Example code:
  public static byte[] concat(byte[]... arrays) {
    int length = 0;
    for (byte[] array : arrays) {
      length += array.length;
    }
    byte[] result = new byte[length];
    int pos = 0;
    for (byte[] array : arrays) {
      System.arraycopy(array, 0, result, pos, array.length);
      pos += array.length;
    }
    return result;
  }
Example output:
[WARNING] guava/guava/src/com/google/common/primitives/Bytes.java:[184,52] [argument.type.incompatible] incompatible types in argument.
  found   : @LTEqLengthOf({"array", "array#num2[index#num3]"}) int
  required: @LTLengthOf(value={"array", "result"}, offset={"0 - 1", "pos - 1"}) int

  
ISSUE 5:
after checking !isEmpty(), start is IndexFor
Need something like EnsuresQualifierIf
also needs https://github.com/kelloggm/checker-framework/issues/154

[WARNING] /home/vlasta/git/guava/guava/src/com/google/common/primitives/ImmutableIntArray.java:[601,38] [array.access.unsafe.high] Potentially unsafe array access: the index could be larger than the array's bound
  found   : @LTEqLengthOf("this.array") int
  required: @IndexFor("this.array") or @LTLengthOf("this.array") -- an integer less than this.array's length

related:https://github.com/panacekcz/checker-framework/issues/27
  
ISSUE 6:
      if (this.size() != that.size()) {
        return false;
      }
      int i = parent.start;
      // Since `that` is very likely RandomAccess we could avoid allocating this iterator...
      for (Object element : that) {
        if (!(element instanceof Integer) || parent.array[i++] != (Integer) element) {
          return false;
        }
      }
      
      [WARNING] /home/vlasta/git/guava/guava/src/com/google/common/primitives/ImmutableIntArray.java:[540,60] [array.access.unsafe.high.range] Potentially unsafe array access: the index could be larger than the array's bound
  index type found: @IntRange(from=-2147483648, to=2147483647) int
  array type found: @UnknownVal int @UnknownVal []
  required        : index of type @IndexFor("this.parent.array") or @LTLengthOf("this.parent.array"), or array of type @MinLen("2147483648")
ISSUE 7:

Caught by catch(Throwable)

	try {
        Class<?> theClass = Class.forName(UNSAFE_COMPARATOR_NAME);

        // yes, UnsafeComparator does implement Comparator<byte[]>
        @SuppressWarnings("unchecked")
        Comparator<byte[]> comparator = (Comparator<byte[]>) theClass.getEnumConstants()[0];
        return comparator;
      } catch (Throwable t) { // ensure we really catch *everything*
        return lexicographicalComparatorJavaImpl();
      }
ISSUE 8:

Unsigned long as string fits into 64 characters.
Loop guarded by variable decreased by right shift or division.
Assuming that Character.MIN_RADIX == 2

ISSUE 9:

   private void ensureRoomFor(@NonNegative int numberToAdd) {
      int newCount = count + numberToAdd; // TODO(kevinb): check overflow now?
      if (newCount > array.length) {
        int[] newArray = new int[expandedCapacity(array.length, newCount)];
        System.arraycopy(array, 0, newArray, 0, count);
        this.array = newArray;
      }
    }

Possibly could be solved by combination of: 
https://github.com/panacekcz/checker-framework/issues/11
https://github.com/kelloggm/checker-framework/issues/158 

ISSUE 10:

public Builder addAll(ImmutableIntArray values) {
      ensureRoomFor(values.length());
      System.arraycopy(values.array, values.start, array, count, values.length());
      count += values.length();
      return this;
    }
    
[WARNING] /home/vlasta/git/guava/guava/src/com/google/common/primitives/ImmutableIntArray.java:[293,79] [argument.type.incompatible] incompatible types in argument.
  found   : @UpperBoundUnknown int
  required: @LTLengthOf(value={"values.array", "this.array"}, offset={"values.start - 1", "this.count - 1"}) int

related: ISSUE 1